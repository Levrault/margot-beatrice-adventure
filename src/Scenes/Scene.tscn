[gd_scene load_steps=23 format=2]

[ext_resource path="res://src/Player/Player.tscn" type="PackedScene" id=1]
[ext_resource path="res://assets/tilesets/tileset_land_middle.tres" type="TileSet" id=2]
[ext_resource path="res://src/Scenes/Scene.gd" type="Script" id=3]
[ext_resource path="res://src/UI/InGameMenu/InGameMenu.tscn" type="PackedScene" id=4]
[ext_resource path="res://src/UI/Scoreboard/Scoreboard.tscn" type="PackedScene" id=5]
[ext_resource path="res://src/Camera/CameraAnchor.tscn" type="PackedScene" id=6]
[ext_resource path="res://src/VFX/IrisShot.tscn" type="PackedScene" id=7]
[ext_resource path="res://src/Objects/Statics/EndOfLevel.tscn" type="PackedScene" id=8]
[ext_resource path="res://src/Scenes/ParallaxBackground/InfiniteAutoScrollParralaxBackground.gd" type="Script" id=9]
[ext_resource path="res://src/Scenes/Chronometer.tscn" type="PackedScene" id=10]
[ext_resource path="res://src/UI/Dialogues/DialogueBox.tscn" type="PackedScene" id=11]
[ext_resource path="res://src/UI/CharacterSwitching/OnTheFlyCharacterSwitching.tscn" type="PackedScene" id=12]
[ext_resource path="res://assets/environment/land/back.png" type="Texture" id=13]
[ext_resource path="res://assets/environment/land/middle.png" type="Texture" id=14]
[ext_resource path="res://src/Scenes/ParallaxBackground/AutoScrollParallaxLayer.gd" type="Script" id=15]
[ext_resource path="res://src/Music/MusicController.tscn" type="PackedScene" id=16]
[ext_resource path="res://src/Objects/Collectables/Collectables.gd" type="Script" id=17]
[ext_resource path="res://src/Tools/Screenshot.tscn" type="PackedScene" id=18]
[ext_resource path="res://src/UI/Debug/DebugSidePanel.tscn" type="PackedScene" id=19]
[ext_resource path="res://src/UI/Commons/Notifications/DeviceChangedNotification.tscn" type="PackedScene" id=20]
[ext_resource path="res://assets/tilesets/tileset_land_background.tres" type="TileSet" id=21]

[sub_resource type="GDScript" id=86]
script/source = "# source https://github.com/GDQuest/godot-demos/blob/master/2018/03-30-astar-pathfinding/pathfind_astar.gd
extends TileMap

export var map_size := Vector2(16, 16)

var path_start_position = Vector2() setget _set_path_start_position
var path_end_position = Vector2() setget _set_path_end_position

var _point_path = []
var _tile_range_reference := Vector2.ZERO

onready var astar_node = AStar2D.new()
onready var obstacles = get_used_cells()
onready var half_cell_size = cell_size / 2


func _ready():
	if not has_node(\"EndOfLevel\"):
		printerr(\"EndOfLevel node is missing for %s : %s\" % [name, get_path()])

	Events.connect(\"room_transition_ended\", self, \"_on_Room_transition_ended\")
	SceneManager.tilemap = self


# Loops through all cells within the map's bounds and
# adds all points to the astar_node, except the obstacles
func astar_add_walkable_cells(obstacles = []):
	var points_array = []
	for y in range(_tile_range_reference.y, _tile_range_reference.y + map_size.y):
		for x in range(_tile_range_reference.x, _tile_range_reference.x + map_size.x):
			var point = Vector2(x, y)
			if point in obstacles:
				continue

			points_array.append(point)
			var point_index = calculate_point_index(point)
			astar_node.add_point(point_index, Vector2(point.x, point.y))
	return points_array


# Once you added all points to the AStar node, you've got to connect them
# The points don't have to be on a grid: you can use this class
# to create walkable graphs however you'd like
func astar_connect_walkable_cells(points_array):
	for point in points_array:
		var point_index = calculate_point_index(point)
		# For every cell in the map, we check the one to the top, right.
		# left and bottom of it. If it's in the map and not an obstacle,
		# We connect the current point with it
		var points_relative = PoolVector2Array(
			[
				Vector2(point.x + 1, point.y),
				Vector2(point.x - 1, point.y),
				Vector2(point.x, point.y + 1),
				Vector2(point.x, point.y - 1)
			]
		)
		for point_relative in points_relative:
			var point_relative_index = calculate_point_index(point_relative)

			if is_outside_map_bounds(point_relative):
				continue
			if not astar_node.has_point(point_relative_index):
				continue
			# Note the 3rd argument. It tells the astar_node that we want the
			# connection to be bilateral: from point A to B and B to A
			# If you set this value to false, it becomes a one-way path
			# As we loop through all points we can set it to false
			astar_node.connect_points(point_index, point_relative_index, false)


# This is a variation of the method above
# It connects cells horizontally, vertically AND diagonally
func astar_connect_walkable_cells_diagonal(points_array):
	for point in points_array:
		var point_index = calculate_point_index(point)
		for local_y in range(3):
			for local_x in range(3):
				var point_relative = Vector2(point.x + local_x - 1, point.y + local_y - 1)
				var point_relative_index = calculate_point_index(point_relative)

				if point_relative == point or is_outside_map_bounds(point_relative):
					continue
				if not astar_node.has_point(point_relative_index):
					continue
				astar_node.connect_points(point_index, point_relative_index, true)


func is_outside_map_bounds(point):
	return (
		point.x < _tile_range_reference.x
		or point.y < _tile_range_reference.y
		or point.x >= (_tile_range_reference.x + map_size.x)
		or point.y >= (_tile_range_reference.y + map_size.y)
	)


func calculate_point_index(point):
	return point.x + (_tile_range_reference.x + map_size.x) * abs(point.y)


func find_path(world_start, world_end):
	self.path_start_position = world_to_map(world_start)
	self.path_end_position = world_to_map(world_end)
	_recalculate_path()
	var path_world = []
	for point in _point_path:
		var point_world = map_to_world(Vector2(point.x, point.y)) + half_cell_size
		path_world.append(point_world)
	return path_world


func _recalculate_path():
	var start_point_index = calculate_point_index(path_start_position)
	var end_point_index = calculate_point_index(path_end_position)
	_point_path = astar_node.get_point_path(start_point_index, end_point_index)


func _on_Room_transition_ended() -> void:
	_tile_range_reference = world_to_map(to_local(SceneManager.anchor.boundsNW.global_position))
	astar_connect_walkable_cells_diagonal(astar_add_walkable_cells(obstacles))


# Setters for the start and end path values.
func _set_path_start_position(value):
	if value in obstacles:
		return
	if is_outside_map_bounds(value):
		return

	path_start_position = value
	if path_end_position and path_end_position != path_start_position:
		_recalculate_path()


func _set_path_end_position(value):
	if value in obstacles:
		return
	if is_outside_map_bounds(value):
		return

	path_end_position = value
	if path_start_position != value:
		_recalculate_path()
"

[node name="Scene" type="Node2D"]
script = ExtResource( 3 )
next_level = "level1"

[node name="Debug" type="CanvasLayer" parent="."]

[node name="FullScreenShader" type="CanvasLayer" parent="."]
layer = 2

[node name="IrisShot" parent="FullScreenShader" instance=ExtResource( 7 )]
visible = false
auto_start = false

[node name="UI" type="CanvasLayer" parent="."]

[node name="Debug" parent="UI" instance=ExtResource( 19 )]

[node name="DialogueBox" parent="UI" instance=ExtResource( 11 )]
visible = false

[node name="OnTheFlyCharacterSwitching" parent="UI" instance=ExtResource( 12 )]
margin_top = -37.0
margin_bottom = 20.0

[node name="Chronometer" parent="UI" instance=ExtResource( 10 )]

[node name="Scoreboard" parent="UI" instance=ExtResource( 5 )]

[node name="Screenshot" parent="UI" instance=ExtResource( 18 )]
margin_left = 480.0
margin_top = 10.0
margin_right = 480.0
margin_bottom = 10.0

[node name="GamepadChanged" parent="UI" instance=ExtResource( 20 )]

[node name="InGameMenu" parent="UI" instance=ExtResource( 4 )]
visible = false

[node name="MusicController" parent="." instance=ExtResource( 16 )]

[node name="ParralaxBackground" type="ParallaxBackground" parent="."]
pause_mode = 2
scroll_offset = Vector2( 0, 135 )
scroll_base_scale = Vector2( 1, 0 )
script = ExtResource( 9 )
__meta__ = {
"_editor_description_": ""
}

[node name="BackgroundParallaxLayer" type="ParallaxLayer" parent="ParralaxBackground"]
motion_mirroring = Vector2( 1536, 0 )
script = ExtResource( 15 )
__meta__ = {
"_editor_description_": ""
}

[node name="Background" type="Sprite" parent="ParralaxBackground/BackgroundParallaxLayer"]
position = Vector2( 0, 135 )
texture = ExtResource( 13 )
region_enabled = true
region_rect = Rect2( 0, 0, 1536, 270 )
__meta__ = {
"_editor_description_": ""
}

[node name="MiddleGroundParallaxLayer" type="ParallaxLayer" parent="ParralaxBackground"]
position = Vector2( 194, 184 )
scale = Vector2( 0.7, 0.7 )
motion_scale = Vector2( 0.5, 1 )
motion_mirroring = Vector2( 480, 0 )
__meta__ = {
"_editor_description_": ""
}

[node name="Sprite" type="Sprite" parent="ParralaxBackground/MiddleGroundParallaxLayer"]
position = Vector2( 358.141, 45.1987 )
texture = ExtResource( 14 )
region_enabled = true
region_rect = Rect2( 0, 0, 1416, 368 )
__meta__ = {
"_editor_description_": ""
}

[node name="Cinematics" type="Node2D" parent="."]

[node name="BackgroundTilemap" type="TileMap" parent="."]
z_index = -1
tile_set = ExtResource( 21 )
cell_size = Vector2( 16, 16 )
format = 1

[node name="MiddleGroundTileMap" type="TileMap" parent="."]
tile_set = ExtResource( 2 )
cell_size = Vector2( 16, 16 )
collision_layer = 2
collision_mask = 0
format = 1
script = SubResource( 86 )
__meta__ = {
"_editor_description_": ""
}

[node name="Player" parent="MiddleGroundTileMap" instance=ExtResource( 1 )]

[node name="Statics" type="Node2D" parent="MiddleGroundTileMap"]

[node name="Platforms" type="Node2D" parent="MiddleGroundTileMap"]

[node name="Traps" type="Node2D" parent="MiddleGroundTileMap"]

[node name="Enemies" type="Node2D" parent="MiddleGroundTileMap"]

[node name="VFX" type="Node2D" parent="MiddleGroundTileMap"]

[node name="NPCs" type="Node2D" parent="MiddleGroundTileMap"]

[node name="Collectables" type="Node2D" parent="MiddleGroundTileMap"]
script = ExtResource( 17 )

[node name="Interactables" type="Node2D" parent="MiddleGroundTileMap"]

[node name="Checkpoints" type="Node2D" parent="MiddleGroundTileMap"]

[node name="EndOfLevel" parent="MiddleGroundTileMap" instance=ExtResource( 8 )]

[node name="Foreground" type="TileMap" parent="."]
z_index = 1
cell_size = Vector2( 16, 16 )
format = 1

[node name="FallLimits" type="Node2D" parent="."]

[node name="Anchors" type="Node2D" parent="."]

[node name="Anchor" parent="Anchors" instance=ExtResource( 6 )]
position = Vector2( 240, 135 )

[editable path="MiddleGroundTileMap/EndOfLevel"]
